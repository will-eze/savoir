@inject NavigationManager Navigation
@inject IJSRuntime JS

<div>
    <nav class="navbar">
        <a href="">
            <img id="home-icon" src="images/logo-icon.png" />
        </a>

        <span class="languageSelection">
            <img id="flag-icon" src="@($"images/{GLOBALS.ActiveLanguage}-icon.png")" @onclick="@(e => LanguageSelectorShown = !LanguageSelectorShown)"/>

            <div class="LanguageSelector" hidden="@(!LanguageSelectorShown)">
                <div class="LanguageSelector__header">
                    <div class="LanguageSelector__arrow"></div>
                </div>
                <div class="LanguageSelector__body">
                    <div class="LanguageSelector__content">
                        <span id="LanguageSelector__french">
                            <img class="flags" src="images/fr-icon.png" alt="French flag" @onclick="@(e => UpdateActiveLanguage("fr"))">
                        </span>
                        <span id="LanguageSelector__spanish">
                            <img class="flags" src="images/sp-icon.png" alt="Spanish flag" @onclick="@(e => UpdateActiveLanguage("sp"))">
                        </span>
                    </div>
                </div>
            </div>
        </span>

        <span class="Search">
            <input id="search-box" type="text" placeholder="Search Verbs..." @onfocus="@(e => displaySearchResults = true)" @onblur="@searchResultLostFocus" @bind-value="@userSearchText" @bind-value:event="oninput">

            <div class="SearchResultsBox" hidden="@(!displaySearchResults || searchResults.Count == 0)">
                <table class="SearchResults__table">

                    @foreach (string verb in searchResults)
                    {
                        <tr class="SearchResult" @onclick="e => DisplaySearchGUI(verb)">
                            <td id="SearchResult__table_definition">
                                @verb
                            </td>
                        </tr>
                    }
                    
                </table>
            </div>
        </span>

        <a href="Credits" id="navbar__credits">
            Credits
        </a>
    </nav>
</div>


@code {
    private bool displaySearchResults = false;

    public async Task searchResultLostFocus()
    {
        await Task.Delay(100);
        displaySearchResults = false;
    }

    // LANG SELECTOR CODE
    public async void UpdateActiveLanguage(string newLang)
    {
        Navigation.NavigateTo("/");
        LanguageSelectorShown = false;
        GLOBALS.ActiveLanguage = newLang;
        await refreshBody.InvokeAsync();
    }

    [Parameter] public EventCallback refreshBody { get; set; }

    public bool LanguageSelectorShown = false;

    // DISPLAY SEARCH INFO/POPUP CODE
    public Dictionary<string, string[]> verbConjugations { get; set; } = new Dictionary<string, string[]>();
    public string[] verbInfo { get; set; } = Array.Empty<string>();

    [Parameter] public EventCallback<Dictionary<string, string[]>> VerbConjugationsChanged { get; set; }
    [Parameter] public EventCallback<string[]> VerbInfoChanged { get; set; }

    public void DisplaySearchGUI(string verb)
    {
        VerbConjugationsChanged.InvokeAsync(GetVerbConjugations(verb));
        VerbInfoChanged.InvokeAsync(GetVerbInfo(verb));
        GLOBALS.displaySearchGUI = true;
    }

    // SEARCH BOX CODE
    public string userSearchText = string.Empty;

    public void SearchTextChanged(ChangeEventArgs args)
    {
        userSearchText = args.Value!.ToString()!.ToLower();
    }

    List<string> searchResults => (userSearchText == string.Empty) ? new List<string>() : GLOBALS.allFilteredVerbs.Where(x => x.StartsWith(GLOBALS.RemoveAccents(userSearchText.ToLower()))).Select(x => GLOBALS.allFilteredVerbs.IndexOf(x)).Select(x => (GLOBALS.allUnfilteredVerbs[x])).ToList();

    public Dictionary<string, string[]> GetVerbConjugations(string verb)
    {
        // gets the verb's record
        string[] verbRecord = GLOBALS.all_verb_data![GLOBALS.allUnfilteredVerbs.FindIndex(x => x == verb)].Split(',');

        // get all the tenses and their starting index in all_verb_data from GLOBALS info
        string[] subjects = GLOBALS.languageSubjectPronouns[GLOBALS.ActiveLanguage];
        int[] tensesStartingIndex = GLOBALS.allTensesIndices.Values.ToArray();

        Dictionary<string, string[]> verbConjugations = new Dictionary<string, string[]>();

        // iterate over all the subjects for the language
        for (int i = 0; i < subjects.Length; i++)
        {
            // define an array which will store the conjugations for every tense for this subject
            string[] currentSubjectConjugations = new string[GLOBALS.allTensesIndices.Keys.Count];

            // populate the array by using the csv data
            for (int k = 0; k < currentSubjectConjugations.Length; k++)
            {
                currentSubjectConjugations[k] = verbRecord[tensesStartingIndex[k] + i];
            }

            // add the array to the verbConjugations
            verbConjugations.Add(subjects[i], currentSubjectConjugations);
        }

        // maps "subject" (directly seen in GLOBALS.languageSubjectPronouns) to string[] of conjugations, with the same order of tenses as seen in GLOBALS.allTensesIndices
        return verbConjugations;
    }

    public string[] GetVerbInfo(string verb)
    {
        string[] verbRecord = GLOBALS.all_verb_data![GLOBALS.allUnfilteredVerbs.FindIndex(x => x == verb)].Split(',');

        // [verbInfinitive, Translation, TRUE if irregular, FALSE if regular verb.]
        string[] verbInfo = { verbRecord[0], verbRecord[1], verbRecord[2] };

        return verbInfo;
    }
}
