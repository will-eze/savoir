<div>
    <nav class="navbar">
        <a href="">
            <img id="home-icon" src="images/logo-icon.png" />
        </a>

        <span class="languageSelection">
            <img id="flag-icon" src="@($"images/{GLOBALS.ActiveLanguage}-icon.png")" @onclick="@(e => LanguageSelectorShown = !LanguageSelectorShown)"/>

            <div class="LanguageSelector" hidden="@(!LanguageSelectorShown)">
                <div class="LanguageSelector__header">
                    <div class="LanguageSelector__arrow"></div>
                </div>
                <div class="LanguageSelector__body">
                    <div class="LanguageSelector__content">
                        <span id="LanguageSelector__french">
                            <img class="flags" src="images/fr-icon.png" alt="French flag" @onclick="@(e => UpdateActiveLanguage("fr"))">
                        </span>
                        <span id="LanguageSelector__spanish">
                            <img class="flags" src="images/sp-icon.png" alt="Spanish flag" @onclick="@(e => UpdateActiveLanguage("sp"))">
                        </span>
                    </div>
                </div>
            </div>
        </span>

        <span class="Search">
            <input id="search-box" type="text" placeholder="Search Verb or Tense..." @bind-value="@userSearchText" @bind-value:event="oninput">

            <div class="SearchResultsBox">
                <table class="SearchResults__table">
                    <colgroup>
                        <col span="5" style="width: 1000px;">
                    </colgroup>
                    <tr class="SearchResult">
                        <td>
                            one
                        </td>
                    </tr>
                </table>
            </div>
        </span>


        <a href="Credits" id="navbar__credits">
            Credits
        </a>
    </nav>
</div>

@code {
    // LANG SELECTOR CODE
    public async void UpdateActiveLanguage(string newLang)
    {
        LanguageSelectorShown = false;
        GLOBALS.ActiveLanguage = newLang;
        await refreshBody.InvokeAsync();
    }

    [Parameter] public EventCallback refreshBody { get; set; }

    public bool LanguageSelectorShown = false;

    // SEARCH BOX CODE
    public string userSearchText = string.Empty;
    List<string> searchResults => GLOBALS.allFilteredVerbs.ToArray().Where(x => x.StartsWith(userSearchText)).ToList();

    public void SearchTextChanged(ChangeEventArgs args)
    {
        userSearchText = args.Value!.ToString()!.ToLower();
    }

    public Dictionary<string, string[]> GetVerbConjugations(string verb)
    {
        string[] verbRecord = Array.Empty<string>();

        // find the verb's record in all_verb_data
        foreach (string record in GLOBALS.all_verb_data!)
        {
            if (record.Split(',')[0] == verb)
            {
                verbRecord = record.Split(',');
            }
        }

        Dictionary<string, string[]> verbConjugations = new Dictionary<string, string[]>();

        // get all the tenses and their starting index in all_verb_data from GLOBALS info
        string[] tenses = GLOBALS.allTensesIndices.Keys.ToArray();
        int[] tensesStartingIndex = GLOBALS.allTensesIndices.Values.ToArray();

        // iterate over all the tenses
        for (int i = 0; i < GLOBALS.allTensesIndices.Keys.Count; i++)
        {
            string tense = tenses[i];
            int startIndex = tensesStartingIndex[i];

            // use thet index to find the current tense conjugations
            string[] currentTenseConjugations = new string[6];
            for (int j = 0; i <= 5; i++)
            {
                // add the conjugations to an array temporarily
                currentTenseConjugations[i] = verbRecord[startIndex + j];
            }
            // add the array to the dict of all conjugations
            verbConjugations.Add(tense, currentTenseConjugations);
        }

        return verbConjugations;
    }
}
