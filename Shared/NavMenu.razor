<div>
    <style>
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1em;
            background-color: #292929;
            color: #fff;
        }

            .navbar input[type="text"] {
                width: 30%;
                padding: 0.5em;
                border-radius: 5px;
                border: 1px solid #ccc;
                display: block;
                margin: 0 auto;
            }

        #home-icon {
            width: 60px;
        }

        #navbar__credits{
            color: #a19d9d;
            font-size: 0.9em;
        }

        #navbar__credits:hover{
            color: #fff;
        }
        #france-icon{
            margin-left: 23px;
            width: 40px;
            border-radius: 3px;
        }

    </style>
    <nav class="navbar">
        <a href="">
            <img id="home-icon" src="images/logo-icon.png" />
        </a>

        <span class="languageSelection">
            <img id="france-icon" src="@($"images/{GLOBALS.ActiveLanguage}-icon.png")" @onclick="SwapLanguages"/>
        </span>

        <input id="search-box" type="text" placeholder="Search Verb or Tense..." @bind-value="@userSearchText" @bind-value:event="oninput">

        <a href="Credits" id="navbar__credits">
            Credits
        </a>
    </nav>
</div>

<p2>@string.Join(',', searchResults.ToArray())</p2>

@code {
    public async void SwapLanguages()
    {
        GLOBALS.ActiveLanguage = (GLOBALS.ActiveLanguage == "fr") ? "sp" : "fr";
        await refreshBody.InvokeAsync();
    }

    [Parameter] public EventCallback refreshBody { get; set; }

    public string userSearchText = string.Empty;
    List<string> searchResults => GLOBALS.allFilteredVerbs.ToArray().Where(x => x.StartsWith(userSearchText)).ToList();

    public void SearchTextChanged(ChangeEventArgs args)
    {
        userSearchText = args.Value!.ToString()!.ToLower().TrimStart();
    }

    public Dictionary<string, string[]> GetVerbConjugations(string verb)
    {
        string[] verbRecord = Array.Empty<string>();

        foreach (string record in GLOBALS.all_verb_data!)
        {
            if (record.Split(',')[0] == verb)
            {
                verbRecord = record.Split(',');
            }
        }

        Dictionary<string, string[]> verbConjugations = new Dictionary<string, string[]>();

        string[] tenses = GLOBALS.allTensesIndices.Keys.ToArray();
        int[] tensesStartingIndex = GLOBALS.allTensesIndices.Values.ToArray();

        for(int i = 0; i < GLOBALS.allTensesIndices.Keys.Count; i++)
        {
            string tense = tenses[i];
            int startIndex = tensesStartingIndex[i];

            string[] currentTenseConjugations = new string[6];
            for (int j = 0; i <= 5; i++)
            {
                currentTenseConjugations[i] = verbRecord[startIndex + j];
            }

            verbConjugations.Add(tense, currentTenseConjugations);
        }

        return verbConjugations;
    }
}
