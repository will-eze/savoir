@inject NavigationManager Navigation
@inject HttpClient Http

@if (contentLoaded)
{
    @ChildContent
}
else
{
    <video autoplay="autoplay" muted id="logoAnimation">
        <source src="videos/logo-animation.mp4" type="video/mp4" />
    </video>
}

@code {
    bool contentLoaded;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Navigation.Uri.Replace("#", string.Empty) == Navigation.BaseUri)
        {
            await LoadAllData();

            await Task.Delay(4000);
            contentLoaded = true;
            StateHasChanged();
        }
        else
        {
            contentLoaded = true;
        }
    }

    private async Task LoadAllData()
    {
        GLOBALS.all_verb_data_french = CleanCSV((await Http.GetStringAsync("csv_files/French/all_verb.csv")))[1..];
        GLOBALS.sets_verb_data_french = CleanCSV((await Http.GetStringAsync("csv_files/French/sets_verb.txt")));
        GLOBALS.all_vocab_data_french = CleanCSV((await Http.GetStringAsync("csv_files/French/all_vocab.csv")))[1..];
        GLOBALS.sets_vocab_data_french = CleanCSV(await Http.GetStringAsync("csv_files/French/sets_vocab.txt"));

        GLOBALS.all_verb_data_spanish = CleanCSV((await Http.GetStringAsync("csv_files/Spanish/all_verb.csv")))[1..];
        GLOBALS.all_vocab_data_spanish = CleanCSV((await Http.GetStringAsync("csv_files/Spanish/all_vocab.csv")))[1..];
    }

    private string[] CleanCSV(string csvData)
    {
        return csvData.Split('\n').Select(x => x.Replace("\r", string.Empty)).ToArray();
    }
}