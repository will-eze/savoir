@page "/VerbQuiz"
@inherits VerbQuizBase
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Verb Quiz</PageTitle>

<div class="VerbQuiz">
    <div class="VerbQuiz__header">
        <h2 id="VerbQuiz__infinitive" @onclick="DisplayEnglishTranslation">@topText</h2>
        <h3 id="VerbQuiz__tense">@verbQuiz.verbinfo[2]</h3>
        <ErrorMessage @ref="errorMsg" activeErrorText="@("Blank fields are not allowed.")" inactiveErrorText="" />
    </div>
    <div class="VerbQuiz__inputs">
        <form onsubmit="return false" autocomplete="off">
            <table class="VerbQuiz__table">
                <colgroup>
                    <col span="1" style="width: 33.3%;">
                    <col span="1" style="width: 33.3%;">
                    <col span="1" style="width: 16.7%;">
                    <col span="1" style="width: 16.7%;">
                </colgroup>

                <VerbInputRow userVerb="@verbQuiz.userVerbs[0]" conjugation="@verbQuiz.conjugations[0]" index="0" ID="@subjectPronouns[0]"      subjectPronoun="@textJe"    OnClipboardClicked="e => ClipboardClicked(0)" onTextChange="@(e => OnTextChange(e, 0))" userInputDisabled="userInputDisabled" displayCorrections="displayCorrections" selectedField="selectedField" onFocusedIndexChanged="@(e => UpdateFocusedIndex(0))"/>
                <VerbInputRow userVerb="@verbQuiz.userVerbs[1]" conjugation="@verbQuiz.conjugations[1]" index="1" ID="@subjectPronouns[1]"      subjectPronoun="Tu"         OnClipboardClicked="e => ClipboardClicked(1)" onTextChange="@(e => OnTextChange(e, 1))" userInputDisabled="userInputDisabled" displayCorrections="displayCorrections" selectedField="selectedField" onFocusedIndexChanged="@(e => UpdateFocusedIndex(1))"/>
                <VerbInputRow userVerb="@verbQuiz.userVerbs[2]" conjugation="@verbQuiz.conjugations[2]" index="2" ID="@subjectPronouns[2]"      subjectPronoun="Il/Elle/On" OnClipboardClicked="e => ClipboardClicked(2)" onTextChange="@(e => OnTextChange(e, 2))" userInputDisabled="userInputDisabled" displayCorrections="displayCorrections" selectedField="selectedField" onFocusedIndexChanged="@(e => UpdateFocusedIndex(2))"/>
                <VerbInputRow userVerb="@verbQuiz.userVerbs[3]" conjugation="@verbQuiz.conjugations[3]" index="3" ID="@subjectPronouns[3]"      subjectPronoun="Nous"       OnClipboardClicked="e => ClipboardClicked(3)" onTextChange="@(e => OnTextChange(e, 3))" userInputDisabled="userInputDisabled" displayCorrections="displayCorrections" selectedField="selectedField" onFocusedIndexChanged="@(e => UpdateFocusedIndex(3))"/>
                <VerbInputRow userVerb="@verbQuiz.userVerbs[4]" conjugation="@verbQuiz.conjugations[4]" index="4" ID="@subjectPronouns[4]"      subjectPronoun="Vous"       OnClipboardClicked="e => ClipboardClicked(4)" onTextChange="@(e => OnTextChange(e, 4))" userInputDisabled="userInputDisabled" displayCorrections="displayCorrections" selectedField="selectedField" onFocusedIndexChanged="@(e => UpdateFocusedIndex(4))"/>
                <VerbInputRow userVerb="@verbQuiz.userVerbs[5]" conjugation="@verbQuiz.conjugations[5]" index="5" ID="@subjectPronouns[5]"      subjectPronoun="Ils/Elles"  OnClipboardClicked="e => ClipboardClicked(5)" onTextChange="@(e => OnTextChange(e, 5))" userInputDisabled="userInputDisabled" displayCorrections="displayCorrections" selectedField="selectedField" onFocusedIndexChanged="@(e => UpdateFocusedIndex(5))"/>
            </table>

            <input type="submit" class="Quiz__submit" id="VerbQuiz__submit" @onclick="ResetVerb" @bind-value="@buttonLabels[buttonLabelIndex]" />
        </form>
    </div>
        <AccentBox OnClick="OnAccentClicked" />
</div>

@code {
    public VerbQuizBase verbQuiz;

    ErrorMessage? errorMsg;

    public string[] buttonLabels = new string[2] { "Submit", "Next" };
    public int buttonLabelIndex = 0;

    public bool userInputDisabled = false;
    public bool displayCorrections = false;

    public string textJe = "Je";

    public int selectedField = -1;
    public int focusedIndex = -1;

    public string topText = string.Empty;

    public string[] subjectPronouns = new string[6] { "je", "tu", "il", "nous", "vous", "ils" };

    private bool awaitingFocusJe = false;

    public VerbQuiz()
    {
        verbQuiz = new VerbQuizBase();
        // on creating the VerbQuiz page, we use the set selected + tenses selected to store the possible verbs/tenses.
        verbQuiz.possibleVerbs = GLOBALS.VerbsSelectedList.ToArray();
        verbQuiz.possibleTenses = GLOBALS.TensesSelectedList.ToArray();

        verbQuiz.RandomVerb();
        topText = verbQuiz.verbinfo[0];

    }

    public void UpdateFocusedIndex(int i)
    {
        if (i >= 0 && i <= 5)
        {
            focusedIndex = i;
        }
    }

    public async Task ResetVerb()
    {
        // if all user input fields are filled, execute IF block
        if (verbQuiz.userVerbs.All(x => x != ""))
        {
            // if SUBMIT button clicked:
            if (buttonLabelIndex == 0)
            {
                buttonLabelIndex = 1;
                userInputDisabled = true;
                displayCorrections = true;
            }

            // if NEXT button clicked:
            else
            {
                buttonLabelIndex = 0;
                userInputDisabled = false;
                displayCorrections = false;

                // reset the user input fields (which are bound to indexes of userVerbs)
                for (int i = 0; i <= 5; i++)
                {
                    verbQuiz.userVerbs[i] = string.Empty;
                }

                // generate a new verb + tense
                verbQuiz.RandomVerb();
                topText = verbQuiz.verbinfo[0];

                awaitingFocusJe = true;
            }
        }
        else
        {
            await errorMsg!.displayError();
        }
    }

    public void OnTextChange(ChangeEventArgs args, int i)
    {
        verbQuiz.userVerbs[i] = args.Value!.ToString()!.ToLower();
        selectedField = i;

        if (i == 0)
        {
            // update the subject field "je" to "j' " if first letter is vowel
            textJeChanged();
        }
    }

    public async Task OnAccentClicked(char accentClicked)
    {
        if (selectedField >= 0 && selectedField <= 5)
        {
            int caretPos = await JS.InvokeAsync<int>("getCaretPosition", subjectPronouns[focusedIndex]);

            verbQuiz.userVerbs[focusedIndex] = verbQuiz.userVerbs[focusedIndex].Insert(caretPos, accentClicked.ToString());
            selectedField = focusedIndex;

            await JS.InvokeVoidAsync("focusElement", subjectPronouns[selectedField]);
            await JS.InvokeVoidAsync("setCaretPosition", subjectPronouns[selectedField], caretPos + 1);
        }
    }


    public void textJeChanged()
    {
        char[] frenchVowels = { 'a', 'e', 'i', 'o', 'u', 'h', 'é', 'è', 'ê', 'ë', 'â', 'à', 'î', 'ì', 'ï', 'ô', 'ò', 'û', 'ù', 'ü' };

        if (verbQuiz.userVerbs[0].Length > 0)
        {
            if (frenchVowels.Contains(verbQuiz.userVerbs[0][0]))
            {
                textJe = "J'";
            }
            else
            {
                textJe = "Je";
            }
        }
        else
        {
            textJe = "Je";
        }

    }

    public async Task DisplayEnglishTranslation()
    {
        topText = verbQuiz.verbinfo[1];

        await Task.Delay(3000);

        await InvokeAsync(() => StateHasChanged());

        topText = verbQuiz.verbinfo[0];
    }

    public async Task ClipboardClicked(int i)
    {
        if (i >= 1 && i <= 5)
        {
            verbQuiz.userVerbs[i] = verbQuiz.userVerbs[i - 1];
            focusedIndex = i;
            selectedField = i;
            await JS.InvokeVoidAsync("focusElement", subjectPronouns[focusedIndex]);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("focusElement", subjectPronouns[0]);
            selectedField = 0;
        }
        else if (awaitingFocusJe)
        {
            awaitingFocusJe = false;
            await JS.InvokeVoidAsync("focusElement", subjectPronouns[0]);
            selectedField = 0;
        }
    }
}