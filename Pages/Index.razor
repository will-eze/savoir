@page "/"
@inject HttpClient Http

<PageTitle>savoir</PageTitle>

<div class="IndexPage" style="@indexPageStyle">
    @if (finishedLoading)
    {
        <h2 class="sub-heading">General Sets</h2>
        for (int i = 0; i <= 3; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }

        <h2 class="sub-heading">Module Sets</h2>
        for (int i = 4; i <= 8; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }

        <h2 class="sub-heading">Extra Sets</h2>
        for (int i = 9; i <= 12; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }

        <h2 class="sub-heading">Fundamentals</h2>
        for (int i = 13; i <= 16; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }

        <h2 class="sub-heading">Conversation</h2>
        for (int i = 17; i <= 19; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }

        <h2 class="sub-heading">Number</h2>
        for (int i = 20; i <= 22; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }

        <h2 class="sub-heading">Calendar</h2>
        for (int i = 23; i <= 26; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }

        <h2 class="sub-heading">Location</h2>
        for (int i = 27; i <= 28; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }
    }
</div>


<TenseMenu TenseMenuHidden="@tenseMenuHidden" ModuleSetHidden="@moduleSetHidden" StudySetHidden="@studySetHidden" ExtraSetHidden="@extraSetHidden" TenseMenuStyle="@tenseMenuStyle"/>


@code {
    public bool finishedLoading = false;

    protected override void OnInitialized()
    {
        int i = 0;
        foreach (string record in GLOBALS.sets_verb_data!)
        {
            setNames![i] = record.Split(',')[0].Replace('/', ',');
            i++;
        }
        foreach (string record in GLOBALS.sets_vocab_data!)
        {
            string moduleName = record.Split(',')[0].Replace('/', ',');
            if (!setNames!.Contains(moduleName))
            {
                setNames![i] = moduleName;
                i++;
            }
        }

        finishedLoading = true;
    }

    private static int numberOfSets = GLOBALS.sets_verb_data!.Length + GLOBALS.sets_vocab_data!.Length - 5;
    public string[] setNames = Enumerable.Repeat(string.Empty, numberOfSets).ToArray();
    public string[] setColours = Enumerable.Repeat(inactiveSetColour, numberOfSets).ToArray();

    public bool tenseMenuHidden = true;
    public bool moduleSetHidden = true;
    public bool studySetHidden = true;
    public bool extraSetHidden = true;

    private int activeSetIndex { get; set; } = -1;

    public const string activeSetColour = "background:#726EFF";
    public const string inactiveSetColour = "background:#D9D9D9";

    public const string indexPageActiveStyle = "margin-right: 0%; transition: margin-right 0.2s";
    public const string indexPageInactiveStyle = "margin-right: 25%; transition: margin-right 0.2s";

    public const string tenseMenuActiveStyle = "margin-right: -26.9%; transition: margin-right 0.2s";
    public const string tenseMenuInactiveStyle = "margin-right: 0%; transition: margin-right 0.2s";

    public string indexPageStyle = indexPageActiveStyle;
    public string tenseMenuStyle = tenseMenuActiveStyle;

    public void OnSetButtonPressed(int setIndexClicked)
    {
        // if user clicks the active set, then hide the tenseMenu and update the colour / activeSetIndex
        if (activeSetIndex == setIndexClicked)
        {
            activeSetIndex = -1;
            setColours![setIndexClicked] = inactiveSetColour;
            tenseMenuHidden = true;

            indexPageStyle = indexPageActiveStyle;
            tenseMenuStyle = tenseMenuActiveStyle;
        }
        // if user clicks non-active set, activate that set by showing tenseMenu and updating colours / activeSetIndex
        else if (activeSetIndex != setIndexClicked)
        {
            setColours![setIndexClicked] = activeSetColour;

            if (activeSetIndex != -1)
            {
                setColours[activeSetIndex] = inactiveSetColour;

            }
            activeSetIndex = setIndexClicked;

            tenseMenuHidden = false;

            indexPageStyle = indexPageInactiveStyle;
            tenseMenuStyle = tenseMenuInactiveStyle;
        }

        // activeSetIndex has now been updated to match the selected set, so make appropriate updates to other components

        if (activeSetIndex >= 0 && activeSetIndex <= 10)
        {
            foreach (string _data in GLOBALS.sets_verb_data!)
            {
                if (_data.StartsWith(setNames![activeSetIndex].Replace(',', '/')))
                {
                    string[] record = _data.Split(',');
                    GLOBALS.VerbsSelectedList = record[1].Split('+').ToList();
                }
            }
        }
        if (activeSetIndex >= 4 && activeSetIndex != 9 && activeSetIndex != 10)
        {
            foreach (string _data in GLOBALS.sets_vocab_data!)
            {
                if (_data.StartsWith(setNames![activeSetIndex].Replace(',', '/')))
                {
                    string[] record = _data.Split(',');
                    GLOBALS.PossibleVocabList = record[1].Split('+').ToList();
                }
            }
        }

        // determine whether to show "Practice" or "Verb + Vocab" buttons on the TenseMenu page

        if (activeSetIndex >= 0 && activeSetIndex <= setNames!.Length)
        {
            if ((activeSetIndex >= 0 && activeSetIndex <= 3) || activeSetIndex == 9 || activeSetIndex == 10)
            {
                studySetHidden = false;
                moduleSetHidden = true;
                extraSetHidden = true;
            }
            else if (activeSetIndex >= 4 && activeSetIndex <= 9)
            {
                studySetHidden = true;
                moduleSetHidden = false;
                extraSetHidden = true;
            }
            else
            {
                studySetHidden = true;
                moduleSetHidden = true;
                extraSetHidden = false;
            }

            GLOBALS.selectedModuleName = setNames![activeSetIndex];
        }
    }
}

