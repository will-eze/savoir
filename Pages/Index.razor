@page "/"
@inject HttpClient Http

<PageTitle>savoir</PageTitle>

<div class="IndexPage" style="@indexPageStyle">
    <h2 class="sub-heading">General Sets</h2>
    
    @if (finishedLoading)
    {
        for (int i = 0; i < 4; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }


        <h2 class="sub-heading">Module Sets</h2>

        for (int i = 4; i < 9; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }


        <h2 class="sub-heading">Extra Sets</h2>

        for (int i = 10; i < setNames!.Length; i++)
        {
            var temp_i = i;
            <button id="@(setNames![temp_i].ToLower())" class="set-btn" style="@setColours![temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setNames![temp_i]</button>
        }
    }
</div>


<TenseMenu TenseMenuHidden="@tenseMenuHidden" ModuleSetHidden="@moduleSetHidden" StudySetHidden="@studySetHidden" TenseMenuStyle="@tenseMenuStyle"/>


@code {
    public bool finishedLoading = false;

    protected override async Task OnInitializedAsync()
    {
        List<string> setNamesList = new List<string>();

        foreach(string record in GLOBALS.sets_verb_data)
        {
            setNamesList.Add(record.Split(',')[0].Replace('/', ','));
        }
        foreach (string record in GLOBALS.sets_vocab_data)
        {
            // only add the module if it wasnt already added in sets_verb_data
            // this prevents module sets being added twice
            // semi bandaid solution
            string moduleName = record.Split(',')[0].Replace('/', ',');
            if (!setNamesList.Contains(moduleName))
            {
                setNamesList.Add(moduleName);
            }
        }
        setNames = setNamesList.ToArray();

        string[] tempSetColours = new string[GLOBALS.sets_verb_data.Length + GLOBALS.sets_vocab_data.Length - 1];
        for (int i = 0; i < GLOBALS.sets_verb_data.Length + GLOBALS.sets_vocab_data.Length - 1; i++)
        {
            tempSetColours[i] = inactiveSetColour;
        }
        setColours = tempSetColours;

        finishedLoading = true;
    }

    public string[]? setNames;
    public string[]? setColours;

    public bool tenseMenuHidden = true;
    public bool moduleSetHidden = true;
    public bool studySetHidden = true;

    private int activeSetIndex { get; set; } = -1;

    public const string activeSetColour = "background:#726EFF";
    public const string inactiveSetColour = "background:#D9D9D9";

    public const string indexPageActiveStyle = "margin-right: 0%; transition: margin-right 0.2s";
    public const string indexPageInactiveStyle = "margin-right: 25%; transition: margin-right 0.2s";

    public const string tenseMenuActiveStyle = "margin-right: -26.9%; transition: margin-right 0.2s";
    public const string tenseMenuInactiveStyle = "margin-right: 0%; transition: margin-right 0.2s";

    public string indexPageStyle = indexPageActiveStyle;
    public string tenseMenuStyle = tenseMenuActiveStyle;

    public void OnSetButtonPressed(int setIndexClicked)
    {
        // if user clicks the active set, then hide the tenseMenu and update the colour / activeSetIndex
        if (activeSetIndex == setIndexClicked)
        {
            activeSetIndex = -1;
            setColours![setIndexClicked] = inactiveSetColour;
            tenseMenuHidden = true;

            indexPageStyle = indexPageActiveStyle;
            tenseMenuStyle = tenseMenuActiveStyle;
        }
        // if user clicks non-active set, activate that set by showing tenseMenu and updating colours / activeSetIndex
        else if (activeSetIndex != setIndexClicked)
        {
            setColours![setIndexClicked] = activeSetColour;

            if (activeSetIndex != -1)
            {
                setColours[activeSetIndex] = inactiveSetColour;

            }
            activeSetIndex = setIndexClicked;

            tenseMenuHidden = false;

            indexPageStyle = indexPageInactiveStyle;
            tenseMenuStyle = tenseMenuInactiveStyle;
        }

        // activeSetIndex has now been updated to match the selected set, so make appropriate updates to other components

        if (activeSetIndex >= 0 && activeSetIndex <= 8)
        {
            foreach (string _data in GLOBALS.sets_verb_info!)
            {
                if (_data.StartsWith(setNames![activeSetIndex]))
                {
                    string[] record = _data.Split(',');
                    GLOBALS.VerbsSelectedList = record[1].Split('+').ToList();
                }
            }

            // determine whether to show "Practice" or "Verb + Vocab" buttons on the TenseMenu page
            if (activeSetIndex >= 0 && activeSetIndex <= 3)
            {
                studySetHidden = false;
                moduleSetHidden = true;

                GLOBALS.selectedModuleName = string.Empty;
            }
            else if (activeSetIndex >= 4 && activeSetIndex <= 9)
            {
                studySetHidden = true;
                moduleSetHidden = false;

                GLOBALS.selectedModuleName = setNames![activeSetIndex];
            }
            else
            {
                
            }
        }

    }
}

