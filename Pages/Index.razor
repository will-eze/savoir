@page "/"
@inject HttpClient Http

<PageTitle>savoir</PageTitle>

<div class="IndexPage" style="@indexPageStyle">
    @if (finishedLoading)
    {
        int i = 0;
        foreach (string header in setNamesDict.Keys)
        {
            <h2 class="sub-heading">@header</h2>
            foreach(string setName in setNamesDict[header])
            {
                int temp_i = i;
                <button id="@setName.ToLower()" class="set-btn" style="@setColours[temp_i]" @onclick="e => OnSetButtonPressed(temp_i)">@setName</button>
                i++;
            }
        }
    }
</div>


<TenseMenu TenseMenuHidden="@tenseMenuHidden" ModuleSetHidden="@moduleSetHidden" StudySetHidden="@studySetHidden" ExtraSetHidden="@extraSetHidden" TenseMenuStyle="@tenseMenuStyle"/>


@code {
    public bool finishedLoading = false;

    protected override void OnInitialized()
    {
        Dictionary<string, List<string>> tempSetNamesDict = new Dictionary<string, List<string>>();
        List<string> tempSetNames = new List<string>();
        int tempNumberOfSets = 0;
        string tempCurrentHeader = string.Empty;

        foreach (string record in GLOBALS.sets_verb_data!)
        {
            if (record.Contains('\"'))
            {
                string header = record.Replace("\"", string.Empty);
                tempCurrentHeader = header;
                if (!tempSetNamesDict.Keys.Contains(header))
                {
                    tempSetNamesDict.Add(header, new List<string>());
                } 
            }
            else
            {
                string tempSetName = record.Split(',')[0].Replace('/', ',');
                if (!tempSetNamesDict.Values.Any(x => x.Any(y => y == tempSetName)))
                {
                    tempSetNamesDict[tempCurrentHeader].Add(tempSetName);
                    tempSetNames.Add(tempSetName);
                    tempNumberOfSets++;
                }
            }
        }

        foreach (string record in GLOBALS.sets_vocab_data!)
        {
            if (record.Contains('\"'))
            {
                string header = record.Replace("\"", string.Empty);
                tempCurrentHeader = header;
                if (!tempSetNamesDict.Keys.Contains(header))
                {
                    tempSetNamesDict.Add(header, new List<string>());
                }
            }
            else
            {
                string tempSetName = record.Split(',')[0].Replace('/', ',');
                if (!tempSetNamesDict.Values.Any(x => x.Any(y => y == tempSetName)))
                {
                    tempSetNamesDict[tempCurrentHeader].Add(tempSetName);
                    tempSetNames.Add(tempSetName);
                    tempNumberOfSets++;
                }
                
            }
        }

        setNamesDict = tempSetNamesDict;
        setNames = tempSetNames.ToArray();
        setColours = Enumerable.Repeat(inactiveSetColour, tempNumberOfSets).ToArray();
        finishedLoading = true;
    }

    public string[] setNames = Array.Empty<string>();
    public string[] setColours = Array.Empty<string>();

    public Dictionary<string, List<string>> setNamesDict = new Dictionary<string, List<string>>();

    public bool tenseMenuHidden = true;
    public bool moduleSetHidden = true;
    public bool studySetHidden = true;
    public bool extraSetHidden = true;

    private int activeSetIndex { get; set; } = -1;

    public const string activeSetColour = "background:#726EFF";
    public const string inactiveSetColour = "background:#D9D9D9";

    public const string indexPageActiveStyle = "margin-right: 0%; transition: margin-right 0.2s";
    public const string indexPageInactiveStyle = "margin-right: 25%; transition: margin-right 0.2s";

    public const string tenseMenuActiveStyle = "margin-right: -26.9%; transition: margin-right 0.2s";
    public const string tenseMenuInactiveStyle = "margin-right: 0%; transition: margin-right 0.2s";

    public string indexPageStyle = indexPageActiveStyle;
    public string tenseMenuStyle = tenseMenuActiveStyle;

    public void OnSetButtonPressed(int setIndexClicked)
    {
        // if user clicks the active set, then hide the tenseMenu and update the colour / activeSetIndex
        if (activeSetIndex == setIndexClicked)
        {
            activeSetIndex = -1;
            setColours![setIndexClicked] = inactiveSetColour;
            tenseMenuHidden = true;

            indexPageStyle = indexPageActiveStyle;
            tenseMenuStyle = tenseMenuActiveStyle;
        }
        // if user clicks non-active set, activate that set by showing tenseMenu and updating colours / activeSetIndex
        else if (activeSetIndex != setIndexClicked)
        {
            setColours![setIndexClicked] = activeSetColour;

            if (activeSetIndex != -1)
            {
                setColours[activeSetIndex] = inactiveSetColour;

            }
            activeSetIndex = setIndexClicked;

            tenseMenuHidden = false;

            indexPageStyle = indexPageInactiveStyle;
            tenseMenuStyle = tenseMenuInactiveStyle;
        }

        // activeSetIndex has now been updated to match the selected set, so make appropriate updates to other components

        if (activeSetIndex >= 0 && activeSetIndex <= 10)
        {
            foreach (string _data in GLOBALS.sets_verb_data!)
            {
                if (_data.StartsWith(setNames![activeSetIndex].Replace(',', '/')))
                {
                    string[] record = _data.Split(',');
                    GLOBALS.VerbsSelectedList = record[1].Split('+').ToList();
                }
            }
        }
        if (activeSetIndex >= 4 && activeSetIndex != 9 && activeSetIndex != 10)
        {
            foreach (string _data in GLOBALS.sets_vocab_data!)
            {
                if (_data.StartsWith(setNames![activeSetIndex].Replace(',', '/')))
                {
                    string[] record = _data.Split(',');
                    GLOBALS.PossibleVocabList = record[1].Split('+').ToList();
                }
            }
        }

        // determine whether to show "Practice" or "Verb + Vocab" buttons on the TenseMenu page

        if (activeSetIndex >= 0 && activeSetIndex <= setNames!.Length)
        {
            if ((activeSetIndex >= 0 && activeSetIndex <= 3) || activeSetIndex == 9 || activeSetIndex == 10)
            {
                studySetHidden = false;
                moduleSetHidden = true;
                extraSetHidden = true;
            }
            else if (activeSetIndex >= 4 && activeSetIndex <= 9)
            {
                studySetHidden = true;
                moduleSetHidden = false;
                extraSetHidden = true;
            }
            else
            {
                studySetHidden = true;
                moduleSetHidden = true;
                extraSetHidden = false;
            }

            GLOBALS.selectedModuleName = setNames![activeSetIndex];
        }
    }
}

